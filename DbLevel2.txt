### Problem Statements and MongoDB Queries

1. Write Mongo query to retrieve documents from the orders in ascending order by total.
   
   //javascript
   
   db.orders.find().sort({ total: 1 })
   

2. Write Mongo query to retrieve the oldest paymentMethod from the payments collection as "_id".
   
   //javascript
   
   db.payments.find({}, { _id: 1, paymentMethod: 1 }).sort({ payment_date: 1 }).limit(1)
   

3. Write Mongo query to retrieve 2nd and 3rd buyers from the buyers collection.
   
   //javascript

   db.buyers.find().skip(1).limit(2)
   

4. Write Mongo query to retrieve the most Expensive product from order_details.
   
   //javascript
   
   db.order_details.find().sort({ price: -1 }).limit(1)
   

5. Write Mongo query to retrieve the first order from the orders as per the order_date.
   
   //javascript
   
   db.orders.find().sort({ order_date: 1 }).limit(1)
   

6. Write Mongo query to retrieve the last 3 orders from the orders collection who have less total amount.
   
   //javascript
   
   db.orders.find().sort({ total: 1 }).limit(3).sort({ order_date: -1 })
   

7. Write Mongo query to retrieve the most recent shipped order from the orders collection.
   
   //javascript
   
   db.orders.find({ status: "shipped" }).sort({ ship_date: -1 }).limit(1)
   

8. Write Mongo query to get the total revenue from all orders.
   
   //javascript
   
   db.orders.aggregate([
     { $group: { _id: null, totalRevenue: { $sum: "$total" } } }
   ])
   

9. Write Mongo query to retrieve all the orders that shipped before 2022-05-26.
   
   //javascript
   
   db.orders.find({ ship_date: { $lt: ISODate("2022-05-26") } })
   

10. Write Mongo query to find the maximum price as maxPrice of products and their names as name for each category.
    
    //javascript
    
    db.products.aggregate([
      { $group: { _id: "$category_id", maxPrice: { $max: "$price" }, name: { $first: "$name" } } }
    ])
    

11. Write Mongo query to find Most used payment Method as paymentMethod and the number of time it is used as count.
    
    //javascript
    
    db.payments.aggregate([
      { $group: { _id: "$paymentMethod", count: { $sum: 1 } } },
      { $sort: { count: -1 } },
      { $limit: 1 }
    ])
    

12. Write Mongo query to find the total count of orders by status.
    
    //javascript
    
    db.orders.aggregate([
      { $group: { _id: "$status", count: { $sum: 1 } } }
    ])
    

13. Write Mongo query to retrieve the orders grouped by customer_id with the max total.
    
    //javascript
    
    db.orders.aggregate([
      { $group: { _id: "$customer_id", maxTotal: { $max: "$total" } } }
    ])
    

### Problem Statements for Laptop Data Analysis

14. **Assess the impact of RAM capacity on laptop prices and ratings. Group laptops by RAM capacity and analyze the average price and rating for each group. Identify any significant trends or outliers.
    
    //javascript
    
    db.laptops.aggregate([
      { $group: {
          _id: "$RAM_capacity",
          avgPrice: { $avg: "$price" },
          avgRating: { $avg: "$rating" }
      }},
      { $sort: { _id: 1 } }
    ])
    

15. **Investigate the price and rating distribution for gaming laptops. Identify which brands are leading in the gaming laptop market by comparing the average price, rating, GPU type, and RAM capacity for laptops categorized as gaming.
    
    //javascript
    
    db.laptops.aggregate([
      { $match: { category: "gaming" }},
      { $group: {
          _id: "$brand",
          avgPrice: { $avg: "$price" },
          avgRating: { $avg: "$rating" },
          GPU: { $first: "$GPU" },
          RAM: { $first: "$RAM_capacity" }
      }},
      { $sort: { avgRating: -1 } }
    ])
    

16. Analyze the warranty periods offered by different brands and their correlation with laptop prices and ratings. Identify any patterns or insights regarding how warranty periods influence consumer ratings and pricing strategies.
    
    //javascript
    
    db.laptops.aggregate([
      { $group: {
          _id: "$brand",
          avgWarranty: { $avg: "$warranty_period" },
          avgPrice: { $avg: "$price" },
          avgRating: { $avg: "$rating" }
      }},
      { $sort: { avgWarranty: 1 } }
    ])
    

17. Examine the relationship between processor brand (Intel, AMD, Apple) and laptop price, rating, and primary storage capacity. Group the laptops by processor brand and compare their average price, rating, and storage statistics to identify key differences.
    
    //javascript
    
    db.laptops.aggregate([
      { $group: {
          _id: "$processor_brand",
          avgPrice: { $avg: "$price" },
          avgRating: { $avg: "$rating" },
          avgStorage: { $avg: "$storage_capacity" }
      }},
      { $sort: { avgPrice: 1 } }
    ])
    